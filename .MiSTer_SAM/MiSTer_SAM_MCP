#!/bin/bash

#======== INI VARIABLES ========
# Change these in the INI file

#======== GLOBAL VARIABLES =========
declare -g mrsampath="/media/fat/Scripts/.MiSTer_SAM"
declare -g misterpath="/media/fat"

#======== DEBUG VARIABLES ========
samquiet="Yes"
samdebug="No"
samtrace="No"

#======== LOCAL VARIABLES ========
samtimeout=60
menuonly="Yes"

#========= PARSE INI =========
# Read INI, Check for mount point presence
while ! test -d /media/fat/
do
	sleep 1
	count=`expr $count + 1`
	if test $count -eq 30; then
		echo " Mount timed out!"
      		exit 1
 		fi
done

if [ -f "${misterpath}/Scripts/MiSTer_SAM.ini" ]; then
	source "${misterpath}/Scripts/MiSTer_SAM.ini"
fi

# Remove trailing slash from paths
for var in mrsampath misterpath arcadepath gbapath genesispath megacdpath neogeopath nespath snespath tgfx16path tgfx16cdpath; do
	declare -g ${var}="${!var%/}"
done


#======== FUNCTIONS ========
function sam_jsmonitor() {
	# Reset trigger file
	echo "" |>/tmp/.SAM_Joy_Change
	# Monitor joystick devices for changes
	inotifywait --quiet --monitor --event create --event delete /dev/input --include js0 --outfile /tmp/.SAM_Joy_Change &
}

function input_clear() {
	# Reset activity triggers
	echo "" |>/tmp/.SAM_Joy_Activity
	echo "" |>/tmp/.SAM_Mouse_Activity
	echo "" |>/tmp/.SAM_Keyboard_Activity
}

function sam_trigger() {
	if [ "$(/bin/find /tmp/.SAM_Joy_Activity -mmin +${samtimeout})" ] && [ "$(/bin/find /tmp/.SAM_Mouse_Activity -mmin +${samtimeout})" ] && [ "$(/bin/find /tmp/.SAM_Keyboard_Activity -mmin +${samtimeout})" ]; then				
	input_clear	
		if [ "$(ps aux | grep -v grep | grep -c -e "SAM Monitor")" == "0" ] && [ "$(ps aux | grep -v grep | grep -c -e '{update_all.sh}')" == "0" ]; then
			echo " No activity detected for ${samtimeout} minutes. SAM starting..."
			/media/fat/Scripts/MiSTer_SAM_on.sh start
			echo " Returned from SAM."
		fi
	input_clear
	fi
}

#======== Start ========

# Convert seconds to minutes
samtimeout=$(echo - | awk -v t=${samtimeout} '{print t/60}')


#======== DEBUG OUTPUT =========
if [ "${samtrace,,}" == "yes" ]; then
	echo "********************************************************************************"
	#======== GLOBAL VARIABLES =========
	echo " mrsampath: ${mrsampath}"
	echo " misterpath: ${misterpath}"
	#======== LOCAL VARIABLES ========
	echo " commandline: ${@}"
	echo " samtimeout: ${samtimeout}"
	echo "********************************************************************************"
fi

# Start monitoring for device changes
if [ "${samquiet,,}" == "no" ]; then echo -n " Starting joystick change monitor..."; fi
sam_jsmonitor
if [ "${samquiet,,}" == "no" ]; then echo " Done!"; fi

# Spawn Joystick monitoring process per detected joystick device
#shopt -s nullglob
#for joystick in /dev/input/js*; do
#	if [ "${samquiet,,}" == "no" ]; then echo " Monitoring controller ${joystick}..."; fi
#	"${mrsampath}/MiSTer_SAM_joy.py" "${joystick}" 2>/dev/null &
#done
#shopt -u nullglob

#Problem with BT creating js1 device that always fires. Let's only monitor js0 for now
if [ -e /dev/input/js0 ]; then
	"${mrsampath}/MiSTer_SAM_joy.py" /dev/input/js0 2>/dev/null &
fi

# Spawn Mouse monitoring process
if [ "${samquiet,,}" == "no" ]; then echo " Monitoring mouse activity."; fi
[[ -z $(ps -o pid,args | grep '[M]iSTer_SAM_mouse.sh' | awk '{print $1}' | head -1) ]] && "${mrsampath}/MiSTer_SAM_mouse.sh" 2>/dev/null &


# Spawn Keyboard monitoring per detected keyboard device
for keyboard in $(dmesg --decode --level info --kernel --color=never --notime --nopager | grep -e 'Keyboard' | grep -Eo 'hidraw[0-9]+'); do
	if [ "${samquiet,,}" == "no" ]; then echo " Monitoring keyboard ${keyboard}..."; fi
	"${mrsampath}/MiSTer_SAM_keyboard.sh" "${keyboard}" 2>/dev/null &
done
# TODO - Detect keyboard device changes


input_clear


#======== MAIN LOOP ========
while :; do
	# If we detect a change to connected joysticks:
	if [ -s /tmp/.SAM_Joy_Change ]; then
		#echo " Device change(s) detected!"
		# Wait for devices to stabilize
		sleep 1
		if [ $(ps aux | grep -v grep | grep -c -e MiSTer_SAM_joy.py) == "0" ]; then
			"${mrsampath}/MiSTer_SAM_joy.py" /dev/input/js0 2>/dev/null &
		fi

		# Reset trigger
		echo "" |>/tmp/.SAM_Joy_Change
	fi
	
	
#Start SAM after input event
	if [ "${menuonly,,}" == "yes" ]; then # Only start SAM from main menu
		# Check if we're at the main menu, wait 1 minute before checking activity
		if [[ "$(cat /tmp/CORENAME)" == "MENU" && "$(/bin/find /tmp/CORENAME -mmin +1)" ]]; then
			# Check activity files against timeout
			echo " Triggered after menuonly=yes"
			sam_trigger
		fi
	else
		# Check activity files against timeout
		echo " Triggered after menuonly=no"
		sam_trigger
	fi
sleep 3
done
